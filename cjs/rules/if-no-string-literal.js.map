{"version":3,"file":"if-no-string-literal.js","sourceRoot":"","sources":["../../src/rules/if-no-string-literal.ts"],"names":[],"mappings":";;;AACA,kDAAuD;AAA9C,oGAAA,WAAW,OAAA;AAIpB;;GAEG;AACU,QAAA,qBAAqB,GAAoC;IACrE,IAAI,EAAE;QACL,IAAI,EAAE;YACL,WAAW,EACV,wHAAwH;SACzH;QACD,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACT,eAAe,EACd,oEAAoE;YACrE,uBAAuB,EACtB,oEAAoE;SACrE;QACD,MAAM,EAAE,EAAE;KACV;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACrB,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;YACrB,MAAM,WAAW,GAAG,yBAAyB,CAAC;YAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAiC,CAAC;YAChE,IACC,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,CAAC,IAAI,MAAK,SAAS;gBAC1C,OAAO,gBAAgB,CAAC,KAAK,CAAC,KAAK,KAAK,QAAQ;gBAChD,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,EAC7C,CAAC;gBACF,OAAO,CAAC,MAAM,CAAC;oBACd,IAAI;oBACJ,SAAS,EAAE,iBAAiB;iBAC5B,CAAC,CAAC;YACJ,CAAC;iBAAM,IACN,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,CAAC,IAAI,MAAK,SAAS;gBACzC,OAAO,gBAAgB,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ;gBAC/C,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,EAC5C,CAAC;gBACF,OAAO,CAAC,MAAM,CAAC;oBACd,IAAI;oBACJ,SAAS,EAAE,iBAAiB;iBAC5B,CAAC,CAAC;YACJ,CAAC;YACD,OAAO;QACR,CAAC;KACD,CAAC;CACF,CAAC;AAEF,kBAAe,6BAAqB,CAAC","sourcesContent":["import { TSESLint, TSESTree } from '@typescript-eslint/utils';\nexport { ESLintUtils } from '@typescript-eslint/utils';\n\ntype MessageIds = 'ifStringLiteral' | 'switchCaseStringLiteral';\n\n/**\n * If statement - no string literal rule\n */\nexport const ifNoStringLiteralRule: TSESLint.RuleModule<MessageIds> = {\n\tmeta: {\n\t\tdocs: {\n\t\t\tdescription:\n\t\t\t\t'Prevents short upper-case string literals being used as values in if statements (enumerations or consts are preferred)',\n\t\t},\n\t\ttype: 'problem',\n\t\tmessages: {\n\t\t\tifStringLiteral:\n\t\t\t\t'Prefer using an enumeration or a const over a short string literal',\n\t\t\tswitchCaseStringLiteral:\n\t\t\t\t'Prefer using an enumeration or a const over a short string literal',\n\t\t},\n\t\tschema: [],\n\t},\n\tdefaultOptions: [],\n\tcreate: (context) => ({\n\t\tIfStatement: (node) => {\n\t\t\tconst literalExpr = /^[A-Z_]+[A-Z0-9_]{0,9}$/;\n\t\t\tconst binaryExpression = node.test as TSESTree.BinaryExpression;\n\t\t\tif (\n\t\t\t\tbinaryExpression?.right.type === 'Literal' &&\n\t\t\t\ttypeof binaryExpression.right.value === 'string' &&\n\t\t\t\tliteralExpr.test(binaryExpression.right.value)\n\t\t\t) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'ifStringLiteral',\n\t\t\t\t});\n\t\t\t} else if (\n\t\t\t\tbinaryExpression?.left.type === 'Literal' &&\n\t\t\t\ttypeof binaryExpression.left.value === 'string' &&\n\t\t\t\tliteralExpr.test(binaryExpression.left.value)\n\t\t\t) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: 'ifStringLiteral',\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t}),\n};\n\nexport default ifNoStringLiteralRule;\n"]}